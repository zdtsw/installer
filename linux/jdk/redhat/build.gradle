plugins {
	id "java"
}

ext {
	junitVersion = "5.9.2"
	testcontainersVersion = "1.17.6"
	assertjCoreVersion = "3.24.2"
}

repositories {
	mavenCentral()
}

group "org.adoptium"
version "1.0.0-SNAPSHOT"

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
	packageTest {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	packageTestImplementation.extendsFrom implementation
	packageTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	packageTestImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
	packageTestImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
	packageTestImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
	packageTestImplementation "org.assertj:assertj-core:$assertjCoreVersion"
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

task packageJdkRedHat {
	dependsOn "assemble"

	group = "packaging"
	description = "Creates RPM package for Red Hat flavours."

	def product = getProduct()
	def productVersion = getProductVersion()
	def gpgKey = getGPGKey()
	def arch = getArch()

	def outputDir = new File(project.buildDir.absolutePath, "ospackage")
	outputs.dir(outputDir)

	doLast {
		if (!file("src/main/packaging/$product/$productVersion").exists()) {
			throw new IllegalArgumentException("Unknown product $product/$productVersion")
		}

		project.copy {
			from("src/main/packaging/$product/$productVersion/")
			into("${buildDir}/generated/packaging")
		}
		if (gpgKey) {
			project.exec {
				workingDir "src/main/packaging"
				commandLine "docker", "build", "--no-cache",
					"-t", "adoptium-packages-linux-jdk-redhat",
					"--secret", "id=gpg,src=${gpgKey}",
					"-f", "Dockerfile",
					getProjectDir().absolutePath + "/src/main/packaging"
			}
		} else {
			project.exec {
				workingDir "src/main/packaging"
				commandLine "docker", "build", "--no-cache",
					"-t", "adoptium-packages-linux-jdk-redhat",
					"-f", "Dockerfile",
					getProjectDir().absolutePath + "/src/main/packaging"
			}
		}

		project.exec {
			workingDir getRootDir()
			commandLine "docker", "run",
				"--rm",
				"-e", "buildArch=${arch}",
				"-e", "buildVersion=${productVersion}",
				"--mount", "type=bind,source=${buildDir},target=/home/builder/build",
				"--mount", "type=bind,source=${outputDir.absolutePath},target=/home/builder/out",
				"adoptium-packages-linux-jdk-redhat:latest"
		}
	}
}

task checkJdkRedHat(type: Test) {
	dependsOn packageJdkRedHat

	description = 'Tests the generated RPM packages for RedHat.'
	group = 'verification'

	testClassesDirs = sourceSets.packageTest.output.classesDirs
	classpath = sourceSets.packageTest.runtimeClasspath

	def product = getProduct()
	def productVersion = getProductVersion()
	def gpgKey = getGPGKey()
	def arch = getArch()

	environment "PACKAGE", "$product-$productVersion-jdk"
	if (gpgKey != null) {
		environment "JDKGPG", "$gpgKey"
		println "We set the gpgkey!"
	}
	environment "testArch", "$arch"
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}

	doFirst {
		if (!file("src/main/packaging/$product/$productVersion").exists()) {
			throw new IllegalArgumentException("Unknown product $product/$productVersion")
		}
	}
}

parent.packageJdk.dependsOn(packageJdkRedHat)
parent.checkJdkPackage.dependsOn(checkJdkRedHat)
