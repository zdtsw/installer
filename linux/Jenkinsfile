/*
--------------------------------------------
buildArch   RPM         DEB         Comments
--------------------------------------------
x86_64      x86_64      amd64
armv7hl     armv7hl     armhf       arm32
aarch64     aarch64     arm64       arm64
ppc64le     ppc64le     ppc64le
source      src         -           only for SRPM and no need specify as option or target
s390x       s390x       s390x       only for jdk8+
*/

env.NODE_LABEL_RPM = "dockerBuild&&linux&&x64" // RedHat + Suse
env.NODE_LABEL_DEB = "docker&&linux&&${ARCH}"  // Debian non-x64 + x64
env.PRODUCT = "temurin"

pipeline {
    agent none
    parameters {
        choice(name: 'VERSION', choices: ['8', '11', '17', '18'], description: 'Build for specific JDK VERSION')
        choice(name: 'ARCH', choices: ['x86_64', 'armv7hl', 'aarch64', 'ppc64le', 's390x'], description: "Build for specific platform\n s300x not for VERSION 8\n")
        choice(name: 'DISTRO', choices: ['all', 'Debian', 'RedHat', 'Suse'], description: 'Build for specific Distro\n Select RPM builds for RedHat and Suse')
        booleanParam(name: 'UPLOAD', defaultValue: false, description: 'Tick this box to upload the deb/rpm files to Artifactory')
    }
    tools {
        jdk "jdk-11.0.13+8"
    }
    stages {
        stage ("Set Build info"){
            steps{
                script{
                    currentBuild.displayName =  "jdk${VERSION} - ${ARCH} - ${DISTRO}"
                    currentBuild.description = env.BUILD_USER_ID
                }
            }
        }
        stage ("BUILD")
        {
            parallel{
                stage('Build Installer for Debian') {
                    when  {
                        anyOf {
                            expression{ params.DISTRO == 'all' }  // trigger debian build
                            expression{ params.DISTRO == 'Debian' }
                        }
                    }
                    agent {
                        label env.NODE_LABEL_DEB
                    }
                    steps{
                        dir('linuxDebian') {
                            script {
                                DISTRO = "Debian"
                                echo "Installer Job for Temurin jdk ${VERSION} - ${ARCH} - ${DISTRO}"
                                setup("${DISTRO}", "${ARCH}")
                                buildAndTest("${DISTRO}", "${ARCH}")
                                if (UPLOAD.toBoolean()) {
                                    echo "Upload artifacts for ${VERSION} - ${ARCH} - ${DISTRO}"
                                    uploadArtifacts("${DISTRO}", "${ARCH}")
                                }
                            }
                        }
                    }
                }
                stage('Build Installer for Redhat') {
                    when  {
                        anyOf {
                            expression{ params.DISTRO == 'all' }  // trigger debian build
                            expression{ params.DISTRO == 'RedHat' }
                        }
                    }
                    agent {
                        label env.NODE_LABEL_RPM
                    }
                    steps{
                        dir('linuxRedHat') {
                            script {
                                DISTRO = "RedHat"
                                echo "Installer Job for Temurin jdk ${VERSION} - ${ARCH} - ${DISTRO}"
                                setup("${DISTRO}", "${ARCH}")
                                buildAndTest("${DISTRO}", "${ARCH}")
                                if (UPLOAD.toBoolean()) {
                                    echo "Upload artifacts for ${VERSION} - ${ARCH} - ${DISTRO}"
                                    uploadArtifacts("${DISTRO}", "${ARCH}")
                                }
                            }
                        }
                    }
                }
                stage('Build Installer for Suse') {
                    when  {
                        anyOf {
                            expression{ params.DISTRO == 'all' }  // trigger debian build
                            expression{ params.DISTRO == 'Suse' }
                        }
                    }
                    agent {
                        label env.NODE_LABEL_RPM
                    }
                    steps{
                        dir('linuxSuse') {
                            script {
                                DISTRO = "Suse"
                                echo "Installer Job for Temurin jdk ${VERSION} - ${ARCH} - ${DISTRO}"
                                setup("${DISTRO}", "${ARCH}")
                                buildAndTest("${DISTRO}", "${ARCH}")
                                if (UPLOAD.toBoolean()) {
                                    echo "Upload artifacts for ${VERSION} - ${ARCH} - ${DISTRO}"
                                    uploadArtifacts("${DISTRO}", "${ARCH}")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

/*
* Common Functions
*/
def setup(DISTRO, buildArch) {
    cleanWs()
    // Docker --mount option requires BuildKit
    env.DOCKER_BUILDKIT = buildArch == "s390x" ? '0' : '1'
    env.COMPOSE_DOCKER_CLI_BUILD=1
    env._JAVA_OPTIONS =  (buildArch == "armv7hl" && DISTRO == "Debian")? "" : "-Xmx4g"
    checkout scm
}

def buildAndTest(DISTRO, buildArch) {
    // for RPM based: RedHat / Suse
    if (DISTRO != "Debian") {
        // Install Adoptium GPG key for RPM signing
        withCredentials([file(credentialsId: 'adoptium-artifactory-gpg-key', variable: 'GPG_KEY')]) {
            sh("./linux/gradlew packageJdk${DISTRO} checkJdk${DISTRO} --parallel -PPRODUCT=${env.PRODUCT} -PPRODUCT_VERSION=${VERSION} -PGPG_KEY=${GPG_KEY} -PARCH=${buildArch}")
        }
    } else {
        def gBuildTask = (buildArch == 'x86_64') ? "packageJdk${DISTRO} checkJdk${DISTRO}" : "packageJdk${DISTRO}"
        def debArchList = [
            "x86_64" : "amd64",
            "armv7hl": "armhf",
            "aarch64": "arm64",
            "ppc64le": "ppc64el",
            "s390x"  : "s390x"
        ]
        sh("./gradlew ${gBuildTask} --parallel -PPRODUCT=${env.PRODUCT} -PPRODUCT_VERSION=${VERSION} -PARCH=${debArchList[buildArch]}")
    }
    archiveArtifacts artifacts: '**/build/ospackage/*,**/build/reports/**,**/packageTest/dependencies/deb/*'
}

def uploadArtifacts(DISTRO, buildArch) {
    if (DISTRO == "Debian") {
        uploadDebArtifacts(buildArch)
    } else {  // DISTRO == RPM(RedHat||Suse)
        uploadRPMArtifacts(DISTRO)
    }
}

def uploadDebArtifacts(buildArch) {
    // full list of all platforms, up to user to opt out s390x+jdk8
    def debArchList = [
        "x86_64" : "amd64",
        "armv7hl": "armhf",
        "aarch64": "arm64",
        "ppc64le": "ppc64el",
        "s390x"  : "s390x"
    ]
    /*
        Debian/Ubuntu    9.0       10.0       11.0        16.04     20.04    20.10     21.04      22.04
        add more into list when avaiable for release
        also update linux/jdk/debian/main/packing/build.sh
    */
    def deb_versions = ["stretch", "buster", "bullseye", "bionic", "focal", "groovy", "hirsute", "jammy"]
    def distro_list = ""
    deb_versions.each { deb_version ->
        // Creates list like deb.distribution=stretch;deb.distribution=buster;
        distro_list += "deb.distribution=${deb_version};"
    }

    rtUpload ( //artifactory plugin
        serverId: 'adoptium.jfrog.io',
        failNoOp: true,
        spec: """{
            "files": [
                {
                "pattern": "**/build/ospackage/temurin-*${debArchList[buildArch]}.deb",
                "target": "deb/pool/main/t/temurin-${VERSION}/",
                "props": "${distro_list}deb.component=main;deb.architecture=${debArchList[buildArch]}"
                }
            ]
        }""",
    )
}

def uploadRPMArtifacts(DISTRO) {
    def distro_Package = [
        'redhat' : [
            'rpm/centos/7',
            'rpm/rocky/8',
            'rpm/rhel/6',
            'rpm/rhel/7',
            'rpm/rhel/8',
            'rpm/fedora/34',
            'rpm/fedora/35',
            'rpm/fedora/36',
            'rpm/oraclelinux/7',
            'rpm/oraclelinux/8',
            'rpm/amazonlinux/2',

        ],
        'suse'   : [
            'rpm/opensuse/15.1',
            'rpm/opensuse/15.2',
            'rpm/opensuse/15.3',
            'rpm/sles/12',
            'rpm/sles/15'
        ]
    ]
    def packageDirs = distro_Package[DISTRO.toLowerCase()]
    // full list of all platforms, up to user to opt out s390x+jdk8 from input
    def rpmArchList = [
        "x86_64" : "x86_64",
        "armv7hl": "armv7hl",
        "aarch64": "aarch64",
        "ppc64le": "ppc64le",
        "source" : "src",  // here we need src in the list to be able to upload
        "s390x"  : "s390x"
    ]

    packageDirs.each {
        packageDir ->
            rpmArchList.each {
                entry -> rtUpload (
                    serverId: 'adoptium.jfrog.io',
                    failNoOp: true,
                    spec: """{
                        "files": [
                            {
                            "pattern": "**/build/ospackage/*.${entry.value}.rpm",
                            "target": "${packageDir}/${entry.key}/Packages/"
                            }
                        ]
                    }"""
                )
            }
    }
}
